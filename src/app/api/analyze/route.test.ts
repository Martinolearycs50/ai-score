import { NextRequest } from 'next/server';

import { GET, POST } from './route';

// Mock the AiSearchAnalyzer jest.mock('@/lib/analyzer-new', () => ({ AiSearchAnalyzer: jest.fn().mockImplementation(() => ({ analyzeUrl: jest.fn().mockResolvedValue({ url: 'https://example.com/', aiSearchScore: 85, pageTitle: 'Test Page', description: 'Test description', timestamp: new Date().toISOString(), crawlerAccessibility: { isHttps: true, allowsAiBots: true, hasRobotsTxt: true, loadTime: 0.5, mobileFriendly: true, crawlableLinks: 10, metaTags: { description: true, ogTags: true, structuredData: true } }, scoringResult: { overallScore: 85, pillarScores: { RETRIEVAL: 25, FACT_DENSITY: 20, STRUCTURE: 15, TRUST: 15, RECENCY: 10 }, recommendations: [] } }) })) })); describe('API Route: /api/analyze', () => { describe('POST endpoint', () => { it('should analyze a valid URL successfully', async () => { const request = new NextRequest('http://localhost:3000/api/analyze', { method: 'POST', headers: { 'content-type': 'application/json', }, body: JSON.stringify({ url: 'https://example.com' }) }); const response = await POST(request); const data = await response.json(); expect(response.status).toBe(200); expect(data.success).toBe(true); expect(data.data).toBeDefined(); expect(data.data.url).toBe('https://example.com/'); expect(data.data.aiSearchScore).toBe(85); }); it('should handle invalid URL format', async () => { const request = new NextRequest('http://localhost:3000/api/analyze', { method: 'POST', headers: { 'content-type': 'application/json', }, body: JSON.stringify({ url: 'not a url' }) }); const response = await POST(request); const data = await response.json(); expect(response.status).toBe(400); expect(data.success).toBe(false); expect(data.error).toContain('URL'); }); it('should handle missing URL', async () => { const request = new NextRequest('http://localhost:3000/api/analyze', { method: 'POST', headers: { 'content-type': 'application/json', }, body: JSON.stringify({}) }); const response = await POST(request); const data = await response.json(); expect(response.status).toBe(400); expect(data.success).toBe(false); expect(data.error).toContain('required'); }); it('should handle invalid JSON', async () => { const request = new NextRequest('http://localhost:3000/api/analyze', { method: 'POST', headers: { 'content-type': 'application/json', }, body: 'invalid json' }); const response = await POST(request); const data = await response.json(); expect(response.status).toBe(400); expect(data.success).toBe(false); expect(data.error).toContain('JSON'); }); it('should handle rate limiting', async () => { // First, make 10 requests to hit the rate limit const requests = Array(10).fill(null).map(() => new NextRequest('http://localhost:3000/api/analyze', { method: 'POST', headers: { 'content-type': 'application/json', 'x-forwarded-for': '192.168.1.1' }, body: JSON.stringify({ url: 'https://example.com' }) }) ); // Process all requests for (const req of requests) { await POST(req); } // 11th request should be rate limited const rateLimitedRequest = new NextRequest('http://localhost:3000/api/analyze', { method: 'POST', headers: { 'content-type': 'application/json', 'x-forwarded-for': '192.168.1.1' }, body: JSON.stringify({ url: 'https://example.com' }) }); const response = await POST(rateLimitedRequest); const data = await response.json(); expect(response.status).toBe(429); expect(data.success).toBe(false); expect(data.error).toContain('Rate limit'); }); it('should handle analyzer errors gracefully', async () => { const { AiSearchAnalyzer } = require('@/lib/analyzer-new'); AiSearchAnalyzer.mockImplementationOnce(() => ({ analyzeUrl: jest.fn().mockRejectedValue(new Error('Network error')) })); const request = new NextRequest('http://localhost:3000/api/analyze', { method: 'POST', headers: { 'content-type': 'application/json', }, body: JSON.stringify({ url: 'https://example.com' }) }); const response = await POST(request); const data = await response.json(); expect(response.status).toBe(502); expect(data.success).toBe(false); expect(data.error).toContain('network'); }); }); describe('GET endpoint', () => { it('should return health check information', async () => { const request = new NextRequest('http://localhost:3000/api/analyze', { method: 'GET' }); const response = await GET(); const data = await response.json(); expect(response.status).toBe(200); expect(data.success).toBe(true); expect(data.message).toContain('AI Search Readiness Analyzer'); expect(data.timestamp).toBeDefined(); expect(data.version).toBeDefined(); }); }); });
